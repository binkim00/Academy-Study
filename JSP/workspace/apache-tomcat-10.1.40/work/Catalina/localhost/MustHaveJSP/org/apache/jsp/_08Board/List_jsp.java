/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-06-05 06:38:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08Board;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model1.board.BoardDTO;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import model1.board.BoardDAO;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model1.board.BoardDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("model1.board.BoardDAO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	// 게시물 개수와 게시물 데이터를 받아오기 위한 DAO 생성
	BoardDAO dao = new BoardDAO();
	// 검색 조건 및 검색어를 저장하는 Map을 생성
	Map<String, Object> param = new HashMap<>();
	// 제목이나 내용으로 검색할지 설정하는 데이터 searchField를 저장
	String searchField = request.getParameter("searchField");
	// 검색할 내용을 설정하는 데이터 searchWord를 저장
	String searchWord = request.getParameter("searchWord");
	// 검색어가 null이 아닐때만 map에 데이터를 저장
	if(searchWord != null && searchWord.length() > 0){
		param.put("searchField", searchField);
		param.put("searchWord", searchWord);
	}
	// 총 데이터 개수를 저장 - 총 페이지의 개수를 구하기 위하여
	int totalCount = dao.selectCount(param);
	// 모든 데이터를 List 저장
	List<BoardDTO> boardLists = dao.selectList(param);
	// 데이터베이스 접속을 종료
	dao.close();

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>회원 게시판</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Link.jsp", out, false);
      out.write("\n");
      out.write("	<h2>목록 보기(List)</h2>\n");
      out.write("	<form method=\"get\">\n");
      out.write("		<table border=\"1\" width=\"90%\">\n");
      out.write("			<tr>\n");
      out.write("				<td align=\"center\">\n");
      out.write("					<select name=\"searchField\">\n");
      out.write("						<option value=\"title\">제목</option>\n");
      out.write("						<option value=\"content\">내용</option>\n");
      out.write("					</select>\n");
      out.write("					<input type=\"text\" name=\"searchWord\"/>\n");
      out.write("					<input type=\"submit\" value=\"검색하기\"/>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("	</form>\n");
      out.write("	<table border=\"1\" width=\"90%\">\n");
      out.write("		<tr>\n");
      out.write("			<th width=\"10%\">번호</th>\n");
      out.write("			<th width=\"50%\">제목</th>\n");
      out.write("			<th width=\"15%\">작성자</th>\n");
      out.write("			<th width=\"10%\">조회수</th>\n");
      out.write("			<th width=\"15%\">작성일</th>\n");
      out.write("		</tr>\n");
      out.write("		");
if(boardLists.isEmpty()){ 
      out.write("\n");
      out.write("			<tr>\n");
      out.write("				<td colspan=\"5\" align=\"center\">\n");
      out.write("					등록된 게시물이 없습니다^^*\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		");
}else{
			int virtualNum = 0;
			for(BoardDTO dto : boardLists){
				virtualNum = totalCount--;
				
      out.write("\n");
      out.write("				<tr align=\"center\">\n");
      out.write("					<td>");
      out.print(virtualNum);
      out.write("</td>\n");
      out.write("					<td align=\"left\">\n");
      out.write("						<a href=\"View.jsp?num=");
      out.print(dto.getNum() );
      out.write("\">\n");
      out.write("							");
      out.print(dto.getTitle());
      out.write("\n");
      out.write("						</a>\n");
      out.write("					</td>\n");
      out.write("					<td>");
      out.print(dto.getId() );
      out.write("</td>\n");
      out.write("					<td>");
      out.print(dto.getVisitCount() );
      out.write("</td>\n");
      out.write("					<td>");
      out.print(dto.getPostDate() );
      out.write("</td>\n");
      out.write("				</tr>\n");
      out.write("				\n");
      out.write("		");
}
		}
      out.write("\n");
      out.write("	</table>\n");
      out.write("	<table border=\"1\" width=\"90%\">\n");
      out.write("		<tr align=\"right\">\n");
      out.write("			<td>\n");
      out.write("				<button type=\"button\" onClick=\"location.href='Write.jsp';\">\n");
      out.write("				글쓰기\n");
      out.write("				</button>\n");
      out.write("			</td>\n");
      out.write("		</tr>\n");
      out.write("	</table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
